
#  docker-compose rm -f
#  docker-compose pull
#  docker-compose up --build -d

version: "3"
services:
  eventservice:
    image: ${DOCKER_REGISTRY-}eventservice
    container_name: eventservice
    restart: on-failure
    build:
      context: .
      dockerfile: EventService/Event.API/Dockerfile-compose
    depends_on:
      - rabbitmqservice
    links:
      - rabbitmqservice
    ports:
      - 7150:80
    networks:
      - my_network
  
  recruitmentservice:
    image: ${DOCKER_REGISTRY-}recruitmentservice
    container_name: recruitmentservice
    restart: on-failure
    build:
      context: .
      dockerfile: RecruitmentService/Recruitment.API/Dockerfile-compose
    depends_on:
      - rabbitmqservice
    links:
      - rabbitmqservice
    ports:
      - 7140:80
    networks:
      - my_network
      
  candidateservice:
    image: ${DOCKER_REGISTRY-}candidateservice
    container_name: candidateservice
    restart: on-failure
    build:
      context: .
      dockerfile: CandidateService/Candidate.API/Dockerfile-compose
    depends_on:
      - rabbitmqservice
    links:
      - rabbitmqservice
    ports:
      - 7130:80
    networks:
      - my_network
      
  rabbitmqservice:
    image: rabbitmq:3.10-management
    container_name: rabbitmqservice
    hostname: "rabbitmqservice"
    ports:
      - 4369:4369
      - 5671:5671
      - 5672:5672
      - 25672:25672
      - 15671:15671
      - 15672:15672
    networks:
      - my_network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5


networks:
  my_network:
    driver: bridge

#
#services:
#  mikroserwisyapi:
#    image: ${DOCKER_REGISTRY-}mikroserwisyapi01
#    container_name: mikroserwisyapi
#    build:
#      context: .
#      dockerfile: mikroserwisy/Dockerfile-compose
#    ports:
#        - 5146:80
#    networks:
#      - my_network
#        
#  productapi:
#    image: ${DOCKER_REGISTRY-}productapi01
#    container_name: productapi
#    build:
#      context: .
#      dockerfile: Product.API/Dockerfile-compose
#    ports:
#        - 5192:80
#    networks:
#      - my_network
#
#
#networks:
#  my_network:
#    driver: bridge